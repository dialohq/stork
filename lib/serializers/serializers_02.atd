type variable_ref_type = [ Input | Model ]

type grammar_case = [
  Nominative
  | Genitive
  | Dative
  | Accusative
  | Instrumental
  | Locative
]

type variable_ref = {
  variableType: variable_ref_type;
  variableId: string
}


type code = [ PLN ]

type declensed_variable = {
  ref: variable_ref;
  grammarCase: grammar_case;
}

type prompt_item = [
  Text of string
  | Verbatim of variable_ref 
  | Declensed of declensed_variable
]
<json adapter.ocaml="Atdgen_universal_codec.Json_adapter.Type_field">
<ocaml repr="classic">
type prompt = prompt_item list <ocaml repr="array">

type variant = { id: string; value: prompt }
type output_repeat = { variantId: string }
type output_link = { requestId: string }
type output =
  [ End | Repeat of output_repeat | Link of output_link ]
    <ocaml repr="classic">

type reaction_step = [Prompt of prompt | Status of status_step ]
<ocaml repr="classic">

type reaction_case = {
  steps: reaction_step list <ocaml repr="array">;
  output: output nullable;
}

type reaction = {
  matchCounterRef: string nullable;
  cases: reaction_case list <ocaml repr="array">;
}

type model_intent_key = {
  groupId: string nullable;
  id: string;
}

type user_intent_key = {
  groupId: string;
  id: string;
}

type intent_key =
  [ Model of model_intent_key | User of user_intent_key ]
    <ocaml repr="classic">

type branch = {
  id: string;
  intentKey: intent_key;
  isGuardian: bool;
  reaction: reaction;
}

type configuredModel = {
  modelId: string;
  parameterId: string;
}

type request = {
  id: string;
  name: string;
  initialVariantId: string;
  variants: variant list <ocaml repr="array">;
  noMatch: reaction;
  noInput: reaction;
  branches: branch list <ocaml repr="array">;
  configuredModels: configuredModel list <ocaml repr="array">;
}

type introduction = {
  prompt: prompt nullable;
  requestId: string nullable;
}

type plan = {
  introduction: introduction;
  requests: request list <ocaml repr="array">
}

type decimal_amount = {main:int; sub:int}
type currency_PLN = {amount:decimal_amount; code:code}
type var_number = { testValue: float }
type var_string = { testValue: string }
type date = { year: int; month: int; day: int }
type var_date = { testValue: date }
type var_nip = {testValue:string}
type var_pesel = {testValue:string}
type currency = currency_PLN
type var_currency = {testValue:currency}
type var_number_or_unspecified = [ Number of var_number | Unspecified ]
type var_date_or_unspecified = [ Date of var_date | Unspecified ]

type primitive_var = [ 
  Number of var_number 
  | String of var_string 
  | Date of var_date 
  | Nip of var_nip 
  | Pesel of var_pesel 
  | Currency of var_currency 
  | NumberOrUnspecified of var_number_or_unspecified
  | DateOrUnspecified of var_date_or_unspecified
  ]
  <json adapter.ocaml="Atdgen_universal_codec.Json_adapter.Type_field">
  

type primitive_variable_type = [ Number | String | Date | Nip | Pesel | Currency | NumberOrUnspecified 
 | DateOrUnspecified]

type structure = {
  name: string;
  variableType: primitive_variable_type;
}

type example_value = {
  name: string;
  value: primitive_var
}

type example_item = example_value list <ocaml repr="array">

type var_collection = {
  structure: structure list <ocaml repr="array">;
  exampleItems: example_item list <ocaml repr="array">
}

type var = [
   Number of var_number
  | String of var_string
  | Date of var_date
  | Nip of var_nip 
  | Pesel of var_pesel 
  | Currency of var_currency
  | Collection of var_collection
  | NumberOrUnspecified of var_number_or_unspecified
  | DateOrUnspecified of var_date_or_unspecified
]
<json adapter.ocaml="Atdgen_universal_codec.Json_adapter.Type_field">

type input_variable = {
  id: string;
  name: string;
  variableType: var;
}

type gender = [ 
  Feminine 
| Masculine 
| Unknown 
] 

type environment = {
  gender: gender;
}

type input_variables = {
  userDefined: input_variable list <ocaml repr="array">;
  environment: environment;
}

type status_step = {
  id: string;
}

type status = {
  id: string;
  key: string;
  value: string;
}

type operator_expr_token = {
  tokenType: string;
  operator: string;
}

type constant_token = {
  value: string;
}

type variable_expression = {
  name: string;
  ref: variable_ref;
}

type variable_expr_token =  {
  value: variable_expression;
}

type brackets = {
  value:basic_token list <ocaml repr="array">;
}

type basic_token = [ 
  Operator of operator_expr_token 
| Variable of variable_expr_token 
| Constant of constant_token 
] 
<json adapter.ocaml="Atdgen_universal_codec.Json_adapter.Type_field">
<ocaml repr="classic">

type basic_value = {
  value:basic_token;
}

type expression_token = [Basic of basic_value | Brackets of brackets] 
<json adapter.ocaml="Atdgen_universal_codec.Json_adapter.Type_field">
<ocaml repr="classic">

type expression = expression_token list <ocaml repr="array">

type user_intent = {
  id: string;
  name: string;
  expression: expression;
}

type user_intent_group = {
  id: string;
  extendedModelId: string;
  extendedModelLabels: string list <ocaml repr="array">;
  intents: user_intent list <ocaml repr="array">;
}

type model_variable = {
  key: string;
  type_: primitive_variable_type;
}

type model_response_schema = {
  modelId: string;
  variables: model_variable list <ocaml repr="array">;
}

type dialogData = {
  inputVariables: input_variables;
  statuses: status list <ocaml repr="array">;
  userIntents: user_intent_group list <ocaml repr="array">;
  modelResponseSchema: model_response_schema list <ocaml repr="array">;
}

type dialog = {
  id: string;
  plan: plan;
  data: dialogData;
}

type deploy_env = [ Production | Test ]

type dialog_file = {
  version: int;
  deploy_env: deploy_env;
  dialog: dialog;
}
