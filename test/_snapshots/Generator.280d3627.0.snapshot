Generator â€º simple transitive change - impl list snapshot
[@@@ocaml.warning \"-32\"]
module Types = Simple_transitive_change_2_t
module Json = Simple_transitive_change_2_j

let get_version_from_json = function
  | `Assoc fields ->
    let version =
      List.find_map
        ~f:(function \"version\", `Int version -> Some version | _ -> None)
        fields
    in
    (match version with
    | None ->
      invalid_arg \"The parsed JSON should have a `version` field of type int\"
    | Some version ->
      version)
  | _ ->
    invalid_arg \"The parsed JSON should be an object.\"

let get_version s = 
  get_version_from_json (Yojson.Safe.from_string s)
let get_version_from_lexbuf p lb = 
  get_version_from_json (Yojson.Safe.from_lexbuf p lb)
module From_1_to_2 = struct
module OldVersion = Simple_transitive_change_1_t
module NewVersion = Simple_transitive_change_2_t
include Simple_transitive_change_user_fns.From_1_to_2
type converter = Simple_transitive_change_upgrader_t.From_1_to_2.converter
let convert_employer: converter -> OldVersion.employee -> OldVersion.employer -> NewVersion.employer = fun converter old_doc -> function 
| OldVersion.Self -> NewVersion.Self
| OldVersion.Company payload -> NewVersion.Company (payload |> (convert_company converter old_doc))
let convert_employment: converter -> OldVersion.employee -> OldVersion.employment -> NewVersion.employment = fun converter old_doc -> fun (a_0, a_1) -> (a_0, a_1 |> (convert_employer converter old_doc))
let convert_employee: converter -> OldVersion.employee -> NewVersion.employee = fun converter old_doc -> old_doc |> (fun old_record -> NewVersion.{ name = old_record.name;
age = old_record.age;
position = old_record.position |> (convert_employment converter old_doc);
version = 2;
skills = old_record.skills |> (Array.map ~f:(convert_skill converter old_doc)); })
let converter = Simple_transitive_change_upgrader_t.From_1_to_2.{ convert_employee;
convert_employment;
convert_employer;
convert_company;
convert_skill }
let convert = convert_employee converter
end
let convert_from_1_to_latest = From_1_to_2.convert
let string_of_employee = Json.string_of_employee

let employee_of_string s = match (get_version s) with
  | 2 -> Json.employee_of_string s
  | 1 -> convert_from_1_to_latest (Simple_transitive_change_1_j.employee_of_string s)
  | v -> invalid_arg (\"Unknown document version: \" ^ \"'\" ^ (string_of_int v) ^ \"'\")


let read_employee p lb = let Yojson.{ lnum; fname; _ } = p in 
  let new_p = Yojson.init_lexer ?fname ~lnum () in
  let ic = open_in_bin (Option.get fname) in
  let new_lb = Lexing.from_channel ic
  in match (get_version_from_lexbuf new_p new_lb) with
  | 2 -> Json.read_employee p lb
  | 1 -> convert_from_1_to_latest (Simple_transitive_change_1_j.read_employee p lb)
  | v -> invalid_arg (\"Unknown document version: \" ^ \"'\" ^ (string_of_int v) ^ \"'\")

