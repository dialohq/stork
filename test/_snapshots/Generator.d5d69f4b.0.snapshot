Generator â€º rescript simple - impl list snapshot
[@@@ocaml.warning \"-32-33-44\"]
open StdLabels
module Types = Rescript_simple_2_t
module Json = Rescript_simple_2_bs
module From_1_to_2 = struct

include Rescript_simple_user_fns.From_1_to_2
type converter = Rescript_simple_upgrader_t.From_1_to_2.converter

let convert_employer: converter -> OldVersion.employee -> OldVersion.employer -> NewVersion.employer = fun converter old_doc -> function 
| OldVersion.Self -> NewVersion.Self
| OldVersion.Company payload -> NewVersion.Company (payload |> (convert_company converter old_doc))
let convert_employment: converter -> OldVersion.employee -> OldVersion.employment -> NewVersion.employment = fun converter old_doc -> fun (a_0, a_1) -> (a_0, a_1 |> (convert_employer converter old_doc))
let convert_employee: converter -> OldVersion.employee -> NewVersion.employee = fun converter old_doc -> old_doc |> (fun old_record -> NewVersion.{ name = old_record.name;
age = old_record.age;
position = old_record.position |> (convert_employment converter old_doc);
version = 2;
skills = old_record.skills |> (Array.map ~f:(convert_skill converter old_doc)); })
let converter = Rescript_simple_upgrader_t.From_1_to_2.{ convert_employee;
convert_employment;
convert_employer;
convert_company;
convert_skill }
let convert = convert_employee converter
end
let convert_from_1_to_latest = From_1_to_2.convert

let get_version_from_json json =
  let toInteger : float -> int option = fun value ->
    if Js.Float.isFinite value && Js.Math.floor_float value == value 
    then Some (int_of_float value)
    else None
  in let getVersionField obj = Js.Dict.get obj \"version\"
  in let obj = Js.Json.decodeObject json
  in let versionJson = Belt.Option.flatMap obj getVersionField
  in let versionNumber = Belt.Option.flatMap versionJson Js.Json.decodeNumber
  in let version = Belt.Option.flatMap versionNumber toInteger in
  match version with 
  | Some version -> version 
  | None -> invalid_arg \"The parsed JSON should be an object with a `version` field of type int.\"

let write_employee = Json.write_employee

let read_employee json = match (get_version_from_json json) with
  | 2 -> Json.read_employee json
  | 1 -> convert_from_1_to_latest (Rescript_simple_1_bs.read_employee json)
  | v -> invalid_arg (\"Unknown document version: \" ^ \"'\" ^ (string_of_int v) ^ \"'\")

